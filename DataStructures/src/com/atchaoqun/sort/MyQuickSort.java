package com.atchaoqun.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class MyQuickSort {

	public static void main(String[] args) {
		int[] arr = {-9,78,500,900,0,23,-567,-99,70, -1,901, 4561};

		//测试快排的执行速度
		// 创建要给80000个的随机的数组
//		int[] arr = new int[8000000];
//		for (int i = 0; i < 8000000; i++) {
//			arr[i] = (int) (Math.random() * 8000000); // 生成一个[0, 8000000) 数
//		}

		System.out.println("排序前");
		Date data1 = new Date();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date1Str = simpleDateFormat.format(data1);
		System.out.println("排序前的时间是=" + date1Str);

		quickSort(arr, 0, arr.length-1);

		Date data2 = new Date();
		String date2Str = simpleDateFormat.format(data2);
		System.out.println("排序前的时间是=" + date2Str);
		System.out.println("arr=" + Arrays.toString(arr));
	}

	public static void quickSort(int[] arr,int left, int right) {
		int l = left; //左下标
		int r = right; //右下标
		//pivot中轴的值
		int pivot=arr[(right+left)/2];
		int temp = 0;
		while (l<r){
			//一直找直到有一个左边的值大于pivot
			while (arr[l]<pivot){
				l+=1;
			}
			//一直找直到有一个右边的值小于pivot
			while (arr[r]>pivot){
				r-=1;
			}
			//如果1>=r说明pivot的左右两边的值，已经按照大小排序
			if (l>=r){
				break;
			}
			//交换
			temp=arr[l];
			arr[l]=arr[r];
			arr[r]=temp;
			//如果交换完，发现arr[l]==pivot,说明r已经到pivot这个位置了r-1，作为下一次递归的右下标
			if (arr[l]==pivot){
				r-=1;
			}
			//如果交换完，发现arr[l]==pivot,说明r已经到pivot这个位置了r+1，作为下一次递归的左下标
			if (arr[r]==pivot){
				l+=1;
			}

		}

		if (l==r){
			l+=1;
			r-=1;
		}

		if (left<r){
			quickSort(arr,left,r);
		}

		if (l<right){
			quickSort(arr,l,right);
		}
	}
}
